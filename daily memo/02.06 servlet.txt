jdbc (update/delete) / servlet

servlet
controller와 view 사이 


서버 
서버-클라이언트 관계를 나눈것 : 2티어 아키텍쳐 
서버를 분리한 이유 : 데이터/보안/업데이트/세션관리 의 이유 + 확장성 ( 다른 플랫폼에서도 같으 ㄴ서버를 통해 제어 가능 ex. 아이폰, 맥북, 아이패드 전부 하나의 서버로 제어 가능)

3티어 아키텍쳐 : 서버 + 클라이언트 + DB 
 
서버는 두 가지 개념이 있다. 
web server : 
이미 완전히 작성이 되어있는 화면(정적 리소스, 정적 파일)을 제공 하는 서버 
ex) 네이버 첫 화면은 누가 들어가던 똑같은 정적 리소스 
대표적인 web : nginx

was : 
동적인 화면을 제공하기 위해 사용하는 서버 ( 동적 페이지, 동적 파일 ) 
대표적인 WAS : tomcat (web + was 전부 들어있다)

CGI vs WAS 
사용자가 요청할때마다 CGI가 프로그램을 킨다 ( 1리퀘스트 = 1 어플리케이션 ) 

WAS가 생기면서 
요청마다 새로운 프로세스가 아니라 쓰레드를 추가하면서 사용 ( 멀티 쓰레딩 구축 ) 

특징. 
1. 멀티쓰레딩 환경을 통해서 one application multi thread로 효율적으로 대용량 트래픽 처리 가능 
2. 

web.xml : tomcat의 설정을 할 수 있는 파일 

servlet : 컨트롤러 개념의 클래스 

servlet 매핑 방법 
1. xml 방식 
2. annotation 방식 


http://localhost:8080/chap01/xml-lifecycle

http://localhost:8080 : 로컬 호스트의 톰캣으로 들어옴 
chap01 : 접속한 톰캣에 돌아가고 있는 application 
xml-lifecycle : application 안에서 xml-lifecycle 이라는 경로를 받아줄 파일을 찾아달라 
> 찾는 방법이 1. xml 방식 2. annotation 방식 
1. xml방식 : web.xml 을 보고 실행 
	tomcat은 실행될 떄 web.xml 을 읽어서 실행한다. 

처음으로 servlet을 호출하면 기본 생성자를 통해 객체가 생성 

2. annotation방식 

라이프사이클 잘 알아두기 

HttpServletREquest 는 ServletRequest 의 자손타입으로 넘어온다. 

GET -> 조회
url 로 요청을 한다. 
url 노출됨
Request 헤더에 담겨온다. 최대로 넘길수 있는 크기가 최대 255byte

POST -> 삽입
url 노출이 안됨 -> url 노출이 안되는 경우는 POST로 요청 ( ex. 로그인 관련 정보는 조회지만 노출되면 안되기에 POST로 요청)  
body 부분에 담겨서 요청. 용량의 제한은 없다 


PUT -> 수정
DELETE -> 삭제 


이벤트가발생되게한 요청 