객체 입출력 / enum 


객체 단위 입출력 

직렬화 : 스트림에 전송할 데이터 크기가 클 경우 직렬로 만들어서 어디서 부터 어디까지가 하나의 객체인지 
꼬리표를 붙여서 구분함 

역직렬화 : 

dto/vo/enum

enum 
객체 배열과 클래스를 섞어놓은 느낌 

DB상에서 체크 제약조건이 걸려있고 특정값으로만 받아야 하는 값들 (Y/N or 성별의 M/F 등) 
을 처리할 때 enum 타입을 적용 


레이어를 나눠서 개발하는 이유 : 유지보수 및 확장성을 위하여 
view : 사용자가 보는 화면 
controller : 사용자로부터 값을 받아, Parsing해서 하나의 덩어리로 묶음 ( 자료형이 다르면 맞춰서 )
-> parsing 및 가공처리
성공했으면 성공 페이지, 실패했으면 실패 페이지 등 화면의 결과를 마지막에 처리  
service :   사용자가 요청한 하나의 트랜잭션에 대한 메소드를 실행
-> 유효성 검사를 한다음, 문제가 없으면 트랜잭션을 처리하기 위한 로직을 실행(dao 로 넘기기/ dml작업의 경우 DB commit, rollback 등 결정)
repository : 사용자가 넘겨준 값을 활용해서 db에 날릴 쿼리 
db에서 온 반응 ( 있으면 있다, 없으면 없다 )를 service 에 다시 넘겨줌 
db
 
